function ivForceRatio(chan1, chan2, thresh1)
	global state
	
	if state.imageViewer.compositeOn
		compData=zeros(state.imageViewer.nPixelsY, state.imageViewer.nPixelsX, 3);
		if state.imageViewer.compositeProjection
			mask= double(state.imageViewer.tsCoredFlatProjection{state.imageViewer.tsFileCounter, chan1}(1:state.imageViewer.nPixelsY, 1:state.imageViewer.nPixelsX))-state.imageViewer.offsets(chan1) >= thresh1;
			
			ratio = 100*...
				(double(state.imageViewer.tsCoredFlatProjection{state.imageViewer.tsFileCounter, chan1}(1:state.imageViewer.nPixelsY, 1:state.imageViewer.nPixelsX))-state.imageViewer.offsets(chan1)) ...
				./ ...
				(double(state.imageViewer.tsCoredFlatProjection{state.imageViewer.tsFileCounter, chan2}(1:state.imageViewer.nPixelsY, 1:state.imageViewer.nPixelsX))-state.imageViewer.offsets(chan2)) ...
				;
		else
			mask = double(state.imageViewer.displaySliceData{chan1}(1:state.imageViewer.nPixelsY, 1:state.imageViewer.nPixelsX))-state.imageViewer.offsets(chan1) >= thresh1;
			ratio = 100*...
				(double(state.imageViewer.displaySliceData{chan1}(1:state.imageViewer.nPixelsY, 1:state.imageViewer.nPixelsX))-state.imageViewer.offsets(chan1)) ...
				./ ...
				(double(state.imageViewer.displaySliceData{chan2}(1:state.imageViewer.nPixelsY, 1:state.imageViewer.nPixelsX))-state.imageViewer.offsets(chan2)) ...
				;
		end
		
		channel=3;
		low=getfield(state.imageViewer, ['lowLUT' num2str(channel)]);
		hi=getfield(state.imageViewer, ['highLUT' num2str(channel)]);
		fColor=[1 1 1];
		
		for colorNumber=1:3
			compData(:, :, colorNumber) = ...
				mask.*min(max(...
				fColor(colorNumber)*(ratio-low)/max(hi-low,1)...
				,0),1);
		end
		set(state.imageViewer.compositeImagehandle, 'CData', compData)
	end