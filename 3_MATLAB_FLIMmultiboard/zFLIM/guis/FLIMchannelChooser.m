function varargout = FLIMchannelChooser(varargin)
% FLIMCHANNELCHOOSER M-file for FLIMchannelChooser.fig
%      FLIMCHANNELCHOOSER, by itself, creates a new FLIMCHANNELCHOOSER or raises the existing
%      singleton*.
%
%      H = FLIMCHANNELCHOOSER returns the handle to a new FLIMCHANNELCHOOSER or the handle to
%      the existing singleton*.
%
%      FLIMCHANNELCHOOSER('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in FLIMCHANNELCHOOSER.M with the given input arguments.
%
%      FLIMCHANNELCHOOSER('Property','Value',...) creates a new FLIMCHANNELCHOOSER or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before FLIMgui_OpeningFunction gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to FLIMchannelChooser_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help FLIMchannelChooser

% Last Modified by GUIDE v2.5 21-Nov-2011 13:52:01

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @FLIMchannelChooser_OpeningFcn, ...
                   'gui_OutputFcn',  @FLIMchannelChooser_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin & isstr(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT

% #########################################################################
% --- Executes just before FLIMchannelChooser is made visible.
function FLIMchannelChooser_OpeningFcn(hObject, eventdata, handles, varargin)
%%% lifted from autogenerated modal dialog
% Choose default command line output for FLIMchooser
handles.output = 0;

% Update handles structure
guidata(hObject, handles);

% Insert custom Title and Text if specified by the user
% Hint: when choosing keywords, be sure they are not easily confused 
% with existing figure properties.  See the output of set(figure) for
% a list of figure properties.
if(nargin > 3)
    for index = 1:2:(nargin-3),
        if nargin-3==index, break, end
        switch lower(varargin{index})
         case 'title'
          set(hObject, 'Name', varargin{index+1});
         case 'string'
          set(handles.text1, 'String', varargin{index+1});
        end
    end
end

% Determine the position of the dialog - centered on the callback figure
% if available, else, centered on the screen
FigPos=get(0,'DefaultFigurePosition');
OldUnits = get(hObject, 'Units');
set(hObject, 'Units', 'pixels');
OldPos = get(hObject,'Position');
FigWidth = OldPos(3);
FigHeight = OldPos(4);
if isempty(gcbf)
    ScreenUnits=get(0,'Units');
    set(0,'Units','pixels');
    ScreenSize=get(0,'ScreenSize');
    set(0,'Units',ScreenUnits);

    FigPos(1)=1/2*(ScreenSize(3)-FigWidth);
    FigPos(2)=2/3*(ScreenSize(4)-FigHeight);
else
    GCBFOldUnits = get(gcbf,'Units');
    set(gcbf,'Units','pixels');
    GCBFPos = get(gcbf,'Position');
    set(gcbf,'Units',GCBFOldUnits);
    FigPos(1:2) = [(GCBFPos(1) + GCBFPos(3) / 2) - FigWidth / 2, ...
                   (GCBFPos(2) + GCBFPos(4) / 2) - FigHeight / 2];
end
FigPos(3:4)=[FigWidth FigHeight];
set(hObject, 'Position', FigPos);
set(hObject, 'Units', OldUnits);


% Make the GUI modal
set(handles.figure1,'WindowStyle','modal')


%%% start of specific gy code
global state;
if ~isfield(state,'spc') || ~isfield(state.spc,'FLIMchoices')
    state.spc.FLIMchoices=[3 0 0 0 0 0];
else
    setupFLIMchoices(handles);
end

% UIWAIT makes FLIMchooser wait for user response (see UIRESUME)
uiwait(handles.figure1);

% #########################################################################
% --- Outputs from this function are returned to the command line.
function varargout = FLIMchannelChooser_OutputFcn(hObject, eventdata, handles)
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
try
    varargout{1} = handles.output;
    delete(hObject);
end



% #########################################################################


% --- Executes on button press in Acq/Calc checkboxes.
function leftCB_Callback(hObject, eventdata, handles)
% Hint: get(hObject,'Value') returns toggle state of acq2
val=get(hObject,'Value');
% always make the corresponding show checkbox to the same val
% as a starting default
tag=get(hObject,'Tag');
num=tag(end);
set(handles.(['show' num]),'Value',val);
readChannelChoices(handles);



% --- Executes on button press in Show checkboxes.
function rightCB_Callback(hObject, eventdata, handles)
% hObject    handle to acq2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of acq2
readChannelChoices(handles);

function readChannelChoices(handles)
global state
% chansToDisplay=find(bitget(state.spc.FLIMchoices,1));
% chansToAcquire=find(bitget(state.spc.FLIMchoices,2));
% chansToCalculate=find(bitget(state.spc.FLIMchoices,3));
tags={'acq' 'acq' 'acq' 'acq' 'calc' 'calc'};
for k=1:6
    cbLeft=handles.([tags{k} num2str(k)]);
    cbRight=handles.(['show' num2str(k)]);
    if (k<=4)
        state.spc.FLIMchoices(k)=2*get(cbLeft,'Value')+get(cbRight,'Value');
    else
        state.spc.FLIMchoices(k)=4*get(cbLeft,'Value')+get(cbRight,'Value');
    end
end

function setupFLIMchoices(handles)
global state
tags={'acq' 'acq' 'acq' 'acq' 'calc' 'calc'};
for k=1:6
    cbLeft=handles.([tags{k} num2str(k)]);
    cbRight=handles.(['show' num2str(k)]);
    if (k<=4)
        set(cbLeft,'Value',bitget(state.spc.FLIMchoices(k),2));
    else
        set(cbLeft,'Value',bitget(state.spc.FLIMchoices(k),3));
    end
    set(cbRight,'Value',bitget(state.spc.FLIMchoices(k),1));
end


% --- Executes on button press in relaunch.
function relaunch_Callback(hObject, eventdata, handles)
% hObject    handle to relaunch (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global gui
try
    close(handles.figure1);
    close(gui.spc.spc_main.spc_main);
end
spc_drawInit;
% % end of the modal dialog
% handles.output=1;
% % Update handles structure
% guidata(hObject, handles);
% uiresume(handles.figure1);






% --- Executes on button press in cancel.
function cancel_Callback(hObject, eventdata, handles)
% hObject    handle to cancel (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
handles.output=0;
% Update handles structure
guidata(hObject, handles);
uiresume(handles.figure1);

