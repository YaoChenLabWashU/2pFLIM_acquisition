function varargout = ExcelExportConfig(varargin)
% EXCELEXPORTCONFIG M-file for ExcelExportConfig.fig
%      EXCELEXPORTCONFIG, by itself, creates a new EXCELEXPORTCONFIG or raises the existing
%      singleton*.
%
%      H = EXCELEXPORTCONFIG returns the handle to a new EXCELEXPORTCONFIG or the handle to
%      the existing singleton*.
%
%      EXCELEXPORTCONFIG('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in EXCELEXPORTCONFIG.M with the given input arguments.
%
%      EXCELEXPORTCONFIG('Property','Value',...) creates a new EXCELEXPORTCONFIG or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before FLIMgui_OpeningFunction gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to ExcelExportConfig_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help ExcelExportConfig

% Last Modified by GUIDE v2.5 25-Nov-2011 15:22:21

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @ExcelExportConfig_OpeningFcn, ...
                   'gui_OutputFcn',  @ExcelExportConfig_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin & isstr(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT

% #########################################################################
% --- Executes just before ExcelExportConfig is made visible.
function ExcelExportConfig_OpeningFcn(hObject, eventdata, handles, varargin)
%%% lifted from autogenerated modal dialog
% Choose default command line output for FLIMchooser
handles.output = 0;

% Update handles structure
guidata(hObject, handles);

% Insert custom Title and Text if specified by the user
% Hint: when choosing keywords, be sure they are not easily confused 
% with existing figure properties.  See the output of set(figure) for
% a list of figure properties.
if(nargin > 3)
    for index = 1:2:(nargin-3),
        if nargin-3==index, break, end
        switch lower(varargin{index})
         case 'title'
          set(hObject, 'Name', varargin{index+1});
         case 'string'
          set(handles.text1, 'String', varargin{index+1});
        end
    end
end

% Determine the position of the dialog - centered on the callback figure
% if available, else, centered on the screen
FigPos=get(0,'DefaultFigurePosition');
OldUnits = get(hObject, 'Units');
set(hObject, 'Units', 'pixels');
OldPos = get(hObject,'Position');
FigWidth = OldPos(3);
FigHeight = OldPos(4);
if isempty(gcbf)
    ScreenUnits=get(0,'Units');
    set(0,'Units','pixels');
    ScreenSize=get(0,'ScreenSize');
    set(0,'Units',ScreenUnits);

    FigPos(1)=1/2*(ScreenSize(3)-FigWidth);
    FigPos(2)=2/3*(ScreenSize(4)-FigHeight);
else
    GCBFOldUnits = get(gcbf,'Units');
    set(gcbf,'Units','pixels');
    GCBFPos = get(gcbf,'Position');
    set(gcbf,'Units',GCBFOldUnits);
    FigPos(1:2) = [(GCBFPos(1) + GCBFPos(3) / 2) - FigWidth / 2, ...
                   (GCBFPos(2) + GCBFPos(4) / 2) - FigHeight / 2];
end
FigPos(3:4)=[FigWidth FigHeight];
set(hObject, 'Position', FigPos);
set(hObject, 'Units', OldUnits);


% Make the GUI modal
set(handles.figure1,'WindowStyle','modal')


%%% start of specific gy code
global spc state
% if not previously initialized, set up basic options
imagesAvailable=isfield(state,'analysisMode') && state.analysisMode~=1;

if ~isfield(spc,'analysis') || ~isfield(spc.analysis,'excelExportOptions')
    % default values
    if imagesAvailable
        % non analysis mode - could be acquiring
        t.ROIvals=1;  % gyROIs on standard channels (1&2)
        t.stdROIs=0;  % standard scanImage ROI analysis results
    else
        t.ROIvals=0;
        t.stdROIs=0;
    end
    t.ROIlife=1;  % gyROIs: empirical lifetimes
    t.ROIcount=0; % gyROIs: total number of photons
    t.ROImean=1;  % gyROIs: mean intensity
    t.fitDetails=0; % fit details
    t.maxROIs=6;
    spc.analysis.excelExportOptions=t;
end

if imagesAvailable
    set(handles.ROIvals,'Enable','on');
    set(handles.stdROIs,'Enable','on');
else
    spc.analysis.excelExportOptions.ROIvals=0;  % gyROIs on standard channels (1&2)
    spc.analysis.excelExportOptions.stdROIs=0;  % standard scanImage ROI analysis results
    set(handles.ROIvals,'Enable','off');
    set(handles.stdROIs,'Enable','off');
end

% put the initial values in the controls
ctrls=fieldnames(handles);
for k=1:numel(ctrls)
    if strcmp(get(handles.(ctrls{k}), 'Type'),'uicontrol') && ...
        (strcmp(get(handles.(ctrls{k}),'Style'),'checkbox') || ...
           strcmp(get(handles.(ctrls{k}),'Style'),'popupmenu'))
        % all checkboxes are named for their option
        set(handles.(ctrls{k}),'Value',spc.analysis.excelExportOptions.(ctrls{k}));
    end
end

% UIWAIT makes FLIMchooser wait for user response (see UIRESUME)
uiwait(handles.figure1);

% #########################################################################
% --- Outputs from this function are returned to the command line.
function varargout = ExcelExportConfig_OutputFcn(hObject, eventdata, handles)
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
try
    varargout{1} = handles.output;
    delete(hObject);
catch
    varargout{1} = 1;
end



% #########################################################################


% --- Executes on button press in Acq/Calc checkboxes.
function leftCB_Callback(hObject, eventdata, handles)
% Hint: get(hObject,'Value') returns toggle state of ROIlife

% --- Executes on button press in select.
function select_Callback(hObject, eventdata, handles)
% hObject    handle to select (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global spc
ctrls=fieldnames(handles);
for k=1:numel(ctrls)
    if strcmp(get(handles.(ctrls{k}), 'Type'),'uicontrol') && ...
        (strcmp(get(handles.(ctrls{k}),'Style'),'checkbox') || ...
           strcmp(get(handles.(ctrls{k}),'Style'),'popupmenu'))
        % all checkboxes are named for their option
        spc.analysis.excelExportOptions.(ctrls{k})= ...
            get(handles.(ctrls{k}),'Value');
    end
end

% end of the modal dialog
handles.output=1;
% Update handles structure
guidata(hObject, handles);
spc_configureExcelExport; % set up the column titles
uiresume(handles.figure1);


% --- Executes on button press in cancel.
function cancel_Callback(hObject, eventdata, handles)
% hObject    handle to cancel (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
handles.output=0;
% Update handles structure
guidata(hObject, handles);
uiresume(handles.figure1);



% --- Executes on selection change in maxROIs.
function maxROIs_Callback(hObject, eventdata, handles)
% hObject    handle to maxROIs (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = cellstr(get(hObject,'String')) returns maxROIs contents as cell array
%        contents{get(hObject,'Value')} returns selected item from maxROIs


% --- Executes during object creation, after setting all properties.
function maxROIs_CreateFcn(hObject, eventdata, handles)
% hObject    handle to maxROIs (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
